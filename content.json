[{"title":"Swift 学习记录随笔03","date":"2016-12-01T16:00:00.000Z","path":"2016/12/02/Swift学习记录随笔03/","text":"如何设置状态栏为白色 在info中添加key：View controller-based status bar appearance value: NO 然后在General -&gt; Deployment Info -&gt; Status Bar Style 设置为：Light 给 UIButton 添加下划线(其他同理）12345678910111213navView.addSubview(disconnectButton) let disStr = NSMutableAttributedString(string: NSLocalizedString(\"LSEBike_Disconnect\", comment: \"断开\")) disStr.addAttribute(NSUnderlineStyleAttributeName, value: 1, range: NSMakeRange(0, disStr.length)) disStr.addAttribute(NSForegroundColorAttributeName, value: UIColor.white, range: NSMakeRange(0, disStr.length)) disconnectButton.setAttributedTitle(disStr, for: .normal) disconnectButton.titleLabel?.font = UIFont.systemFont(ofSize: 15) disconnectButton.addTarget(self, action: #selector(self.clickDisconnect), for: .touchUpInside) disconnectButton.snp.makeConstraints &#123; (make) in make.width.equalTo(60) make.height.equalTo(44) make.left.equalTo(0) make.top.equalTo(20) &#125;","tags":[{"name":"iOS-Swift3.0","slug":"iOS-Swift3-0","permalink":"http://www.andywu.cn/tags/iOS-Swift3-0/"}]},{"title":"Swift 学习记录随笔02","date":"2016-10-16T16:00:00.000Z","path":"2016/10/17/Swift 学习记录随笔02/","text":"swift 3.0 去除了 Foundation 的 NS 前缀 多用 struct 类 OC 与 swift3.0 的一些明显区别123456789101112131415161718/* 1. 多用类方法 2. 访问当前对象的属性，可以不适用 ‘self’， 建议都不用，在编译提示的时候，再添加，会对’语境‘有更好的体验。 原因：闭包（类似OC block），需要使用self。 3. 没有分号 ‘；’，目的用于分割语句，默认不需要。 除非原本两行的代码放在了同一行，则用分号分隔。 4. 枚举类型的调用： OC 直接写完整 swift 通过‘.’点语法来调用 5. 监听方法 OC @selector swift #selector 6. 调试 OC NSLog swift print*/ 注释的技巧： // MARK: - 标记，等于 OC 的 #pragma mark - // TODO: 警告标记1 // FIXME: 警告标记2 xcode 8 才有 option + command + / 快捷注释 小Tips ?? 是一个简单的三目，如果有值，使用值，如果没有值，使用 ?? 后面的值替代 guard let 守护一定有值，如果没有值，直接返回 if let / var 连用语法，目的也是判断是否有值 guard let &amp; if let 的技巧，使用同名的变量接收值，在后续使用的都是非空的值，不需要解包，好处可以避免起名字的烦恼 字符串 UTF8 编码每个汉字为3个字节。 let dateStr = String(format:”%02d:%02d:%02d”, a, b, c) 外部参数 外部参数就是在形参前加一个名字 外部参数不会影响函数内部的细节 外部参数会让外部调用方看起来更加的直观 外部参数如果使用 _（下划线），在外部调用函数时，会忽略形参的名字 _ 下划线 在swift中 _ 就是可以忽略任何不感兴趣的内容 如果某个参数从来没有被用到，可以使用 _ （下划线） 来代替 函数默认值 通过给参数设置默认值，在调用的时候，可以任意组合参数，如果不指定，就使用默认值 闭包12345/// 1. 简单闭包let block1 = &#123; print(\"Hello\")&#125;block1() 12345678/// 2. 带参数的闭包/// 闭包中，参数，返回值，直线代码都写在&#123;&#125;中，/// 需要使用一个关键字`in`分隔定义和实现/// &#123; 形参列表 -&gt; 返回值类型 in // 实现代码 &#125;let block2 = &#123; (x: Int) -&gt; Int in print(x)&#125;block2() 123456/// 3. 带参数/返回值的闭包/// (Int) -&gt; Intlet block3 = &#123; (x: Int, y: Int) -&gt; Int in return x+y&#125;block3(20+50) GCD 说明：将任务添加到队列，指定执行任务的函数 （队列调度任务（block/闭包），以同步/异步的方式执行） 1234567891011121314func gcd_demo(completion: @escaping (_ result:[String])-&gt;()) &#123; DispatchQueue.global().async &#123; print(\"耗时操作\\(Thread.current)\") // 休眠 Thread.sleep(forTimeInterval: 1.0) // 获得结果 let json = [\"头像\", \"年龄\", \"性别\"] // 主队列回调 DispatchQueue.main.async(execute: &#123; print(\"主线程更新UI\\(Thread.current)\") completion(json) &#125;) &#125; &#125; 尾随闭包 函数的最后一个参数是闭包，函数参数可以提前结束，最后一个参数直接使用 {} 包装闭包的代码 解除循环引用的方式12/// 跟OC的方法一模一样weak var weakSelf = self 12/// 推荐方法⭐️⭐️⭐️[weak self] 12345/// 了解/// [unowned self] 表示 &#123;&#125; 中的所有 self 都是 assign 的/// 不会强引用，但是，如果对象释放，指针地址不会变化/// 如果对象被释放，继续调用，就会出现野指针的问题[unowned self]","tags":[{"name":"iOS-Swift3.0","slug":"iOS-Swift3-0","permalink":"http://www.andywu.cn/tags/iOS-Swift3-0/"}]},{"title":"Swift 学习记录随笔01","date":"2016-10-11T16:00:00.000Z","path":"2016/10/12/Swift学习记录随笔01/","text":"如何关闭 Xcode 8 的系统log日志 进入地方在你选择模拟器的左边有一个你的App图标和名字， 点击一下选择Edit Scheme。 然后选择Run-&gt;Environment Variables-&gt;+号 key: OS_ACTIVITY_MODE value: disable tableview 的自带下拉刷新控件 使用UIRefreshControl 实现 UITableView下拉刷新 tabelview refreshcotrol 虚化效果：1234let blurEffect = UIBlurEffect(style: .light)let effect = UIVisualEffectView(effect: blurEffect)effect.frame = CGRect()supserView.addSubView(effect) 第三方常用库 Kingfisher 如同SDWebImage Just 如同AFN swift中如何使用OC 的文件 new file oc file 创建一个 Bridging-Header.h 在 BridgingHeader 中 编写：#import &lt;库/库头文件&gt; 心跳关键帧动画：12345let btnAnime = CAKeyframeAnimation(kePath: \"transform.scale\")btnAnime.values = [1.0, 0.7, 0.5, 0.3, 0.5, 0.7, 1.0]btnAnime.keyTimes = [0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 1.0]btnAnime.duration = 0.2btn.layer.add(btnAnime, forKey: \"SHOW\")","tags":[{"name":"iOS-Swift3.0","slug":"iOS-Swift3-0","permalink":"http://www.andywu.cn/tags/iOS-Swift3-0/"}]},{"title":"Xcode 8 构建版本无效或无法被找到的原因","date":"2016-10-09T16:00:00.000Z","path":"2016/10/10/Xcode 8 构建版本无效或无法被找到的原因/","text":"前言 啰嗦几句，可以略过。今天早上我用Xcode 8 构建了4个版本，到最后一个才真正的成功，app是替国外客户开发的，由于沟通不方便要多苦逼就有多苦逼。好在最后问题解决了。 主要原因： info.plist文件的配置没有写好苹果对于用户的隐私一向做的很好，在以前使用APP外的权限时，有些是不用写配置的，现在不同了。估计想做的更好，于是乎，以前不用设置的权限现在都要设置了。详细的请看下面：123456789Privacy - Microphone Usage Description //麦克风权限Privacy - Contacts Usage Description //通讯录权限Privacy - Camera Usage Description //摄像头权限Privacy - NSSiriUsageDescription //Siri的权限Privacy - Bluetooth Peripheral Usage Description //蓝牙Privacy - Reminders Usage Description //提醒事项Privacy - Motion Usage Description //运动与健康Privacy - Media Libaray Usage Description //媒体资源库Privacy - Calendars Usage Description //日历 在APP中有用到什么就添加什么，注意，value也得写。不然依旧无法通过。 如下图： Xcode 8 的 Capabilities 设置，有用到就打开。如，Push Notifications 有用到推送的请打开，并保证 Steps 两项都打勾，不然一样无法通过。 End目前来说我只发先了这个，如果还有其他的原因后期再增加到这里。","tags":[{"name":"iOS-OC","slug":"iOS-OC","permalink":"http://www.andywu.cn/tags/iOS-OC/"}]},{"title":"关于iOS 10 无法收到极光推送通知的问题","date":"2016-10-09T16:00:00.000Z","path":"2016/10/10/iOS_10_收不到后台推送的通知/","text":"问题描述：iOS 10 收不到后台推送的通知9月底我用Xcode7.3提交了一个版本。后来一想，都出10了还用Xcode7来提交会不会在10上面有些不兼容。于是乎查看了下iOS10的新特效以及需要的新配置。其实代码没有修改什么，主要是下载极光的demo把那代码复制粘贴下，（之前推送没有任何问题）然后再来测试。😭结果收不到。这是多么悲剧的事情… 于是网上各种搜，大多都是从证书创建入手一步一步配置下去。好吧，说到这里，其实我的代码一直没有问题，不管是极光管理后台的配置还是Apple那繁琐的证书设置都没有问题，那真正的问题再哪里呢？ 粗心大意自己粗心大意&amp;……&amp;%%……&amp;&amp;…………粗心大意 问题排查言归正传，首先请确认以下几点是否有做好： 极光后台的证书是否设置正确，如果不知道如何设置请看iOS证书设置指南，iOS集成指南 询问后台推送模式是否与APP设置的推送模式一样？如果不一样请先统一一下。 Xcode 8 的请打开 Push Notifications 。 优先在开发环境测试，如何测试？😂 直接跑真机调试就可以了。当然代码中的必须设置为开发环境 static BOOL isProduction = NO; 如何测试生产环境，请打包测试吧，不知道打包测试的请看这里； 如果还是没有收到，这不是你的问题。真不是你的问题。但可以肯定的是：这是代码的问题，代码的问题如何解决，请直接看极光demo。 至此，上面都做对了。你就会感叹，终于收到了。 End我的问题是出现在哪里呢？😂 是第5步没有做到位 Xcode 7.3的测试生产环境可以代码直接设置 static BOOL isProduction = YES; ，再让后台也统一为生产环境就能收到了。但是Xcode 8 不行了。被坑死。必须得打包才能测试。","tags":[{"name":"iOS-OC","slug":"iOS-OC","permalink":"http://www.andywu.cn/tags/iOS-OC/"}]},{"title":"个人博客的搭建","date":"2016-10-07T16:00:00.000Z","path":"2016/10/08/个人博客的搭建/","text":"感谢 首先得非常感谢万能的互联网，其次感谢这篇文章以及此作者，还有这篇文章的作者，再感谢提供主题的人。具体如何搭建我就不多说了，请戳前面两篇文章。下面我就只讲讲搭建过程中所遇到的问题，以及如何解决。 hexo 错误出现：ERROR Deployer not found: git 的错误，请执行下面的代码。1$ npm install hexo-deployer-git --save // 安装hexo-deployer-git自动部署发布工具 出现：Error: Cannot find module ‘./build/Release/DTraceProviderBindings’] 的错误，请执行下面的代码。12$ npm uninstall hexo-cli -g // 卸载$ npm install hexo-cli -g // 重装 hexo username.github.io/_config.yml 基本配置12345678title: 博客名 //你博客的名字author: 博客作者 //你的名字language: zh-Hans //语言 中文theme: yilia //主题名称deploy: type: git //使用Git 发布 repo: https://github.com/username/username.github.io.git // Github仓库 branch: master hexo 常用命令12345$ hexo new \"新建文章的标题\" // 标题$ hexo s // 保存所写$ hexo clean // 清除缓存文件 (db.json) 和已生成的静态文件 (public)$ hexo g // 生成静态文件$ hexo d // 部署网站：部署之前请先生成静态文件 hexo 主题更换1234$ cd 到hexo文件$ cd 到themes 文件$ git clone 主题地址$ git pull username.github.io 用域名来替换 首先得有自己的域名，域名的购买可以直接去阿里云的万网购买。 有了域名后，就直接去：控制台 -&gt; 域名 -&gt; 点击所购买的域名进入 -&gt; 域名控制台 -&gt; 域名解析 添加如下图的设置 然后 在 .source/ 文件下面添加一个 CNAME 的文件，不知道如何创建的可以点这里下载，记得把此文件放于source文件下面，此文件中编写你所购买的域名，如：andywu.cn 最后把它提交的github上去就OK了，如何提交，可以直接使用 $ hexo d -g 指令执行","tags":[{"name":"hexo","slug":"hexo","permalink":"http://www.andywu.cn/tags/hexo/"}]}]